"""
    ProtocolQCExploit
    This protocol is an extention for RETeam protocol,
    used for specific commands like "init_alloc"


Written By: NirZ
15/8/2010
"""


import struct
import time
from Mits.Utils.General import pack32L, unpack32L
from Mits.Protocols.ProtocolRETeam import ProtocolRETeam
from Mits.Utils.General import gen_response
from Mits.Utils.NandCsv import NandCsv


MSM_7200						   = 0
MSM_6010						   = 1
MSM_6550						   = 2




FLASH_NAND_8BIT                    = 0x01
FLASH_NAND_16BIT                   = 0x02


FLASH_NAND_PAGE_SIZE_512           = 512 
FLASH_NAND_PAGE_SIZE_2048          = 2048


class ProtocolQCExploit(ProtocolRETeam):
    name = "Exploit"


    class Commands(ProtocolRETeam.Commands):
        CMD_PROB_NAND          = "PRBN"        
        CMD_INIT_NAND          = "INTN"
        CMD_READ_NAND          = "NAND"
        INTERNAL_NAND_INIT	   = "INDI"
        INTERNAL_NAND_UPDATE   = "INDU"
        INTERNAL_NAND_READ	   = "INDR"        
        CHALLENGE_REQ	       = "CHRQ"
        CHALLENGE_RES          = "CHRS"
        INIT_ALLOC             = "ALOC"
        UNPACK                 = "UPAK"
    
    def __init__(self, framer):
        ProtocolRETeam.__init__(self, framer)
        
    def unpack(self):
         self.framer.send(self.Commands.UNPACK)
         time.sleep(1)


    def init_alloc(self, addr_start = 0, addr_end = 0x800000):
        tout = self.framer.get_timeout()
        self.framer.set_timeout(0.1)
         
        try:
            ret = self._ProtocolRETeam__send_command(self.Commands.INIT_ALLOC, \
                             pack32L(addr_start) + pack32L(addr_end), sleep = 1)
            
            self.framer.set_timeout(tout)
            return unpack32L(ret)
        except Exception, e:
            if "FramerRETeam: got only empty head!" in repr(e):
                pass
            else:
                raise
            
        self.framer.set_timeout(tout)
        return None


    def nand_probe_init(self, chipset_type, base_address, which_flash = 0):
        """
        chipset_type: 0-7200, 1-6010, 2-6550
        """        
        #get flash id from phone
        maker_id, vendor_id = self.nand_probe(chipset_type, base_address)
        #find flash data in table and print
        nand_csv = NandCsv()
        nand_data = nand_csv.get_data(maker_id, vendor_id)
        
        for i in nand_data.keys():
            print "%012s:"%(i),nand_data[i]        
      
        #init the flash
        self.nand_init(chipset_type, base_address,\
                nand_data["PageSize"], nand_data["SpareSize"], nand_data["BlockSize"], nand_data["BlockCount"], nand_data["Width"], \
                which_flash)


        
    def nand_probe(self, chipset_type, base_address):
        data = pack32L(chipset_type) + pack32L(base_address)
        result = self._ProtocolRETeam__send_command(self.Commands.CMD_PROB_NAND, data)
        if (len(result) < 8):
            raise repr(result)
        maker_id  = unpack32L(result[:4])
        device_id = unpack32L(result[4:])
        print "maker  id: %08X"% maker_id
        print "device id: %08X"% device_id
        
        return (maker_id, device_id)


        
    def nand_init(self, chipset_type, base_addr, page_size, spare_size, block_size, block_count, width, which_flash):
        data = struct.pack("<IIIIIIII", chipset_type, base_addr, page_size, spare_size, block_size, block_count, width, which_flash)
        return self._ProtocolRETeam__send_command(self.Commands.CMD_INIT_NAND, data)


    def nand_read(self, page):
        return self._ProtocolRETeam__send_command(self.Commands.CMD_READ_NAND, pack32L(page))
    
    def internal_nand_init(self, start_addr = 0, end_addr = 0, version = 1):                
        nand_type_string = {1:"1 - Nand", 2:"2 - OneNand", 3:"3 - OrNand"}
        
        cmd = pack32L(start_addr) + pack32L(end_addr) + pack32L(version)
        
        tout = self.framer.get_timeout()
        self.framer.set_timeout(20)
	self.framer.base.flush()
        try:
            data = self._ProtocolRETeam__send_command(self.Commands.INTERNAL_NAND_INIT, cmd)
        except Exception, e:
            if "recv error" in repr(e):
                raise Exception("Can't find internal! %r"%(e))
   
                
        self.framer.set_timeout(tout)
        values = struct.unpack("<" + "I"*8, data[:8*4])




        (device_maker_id, device_id, block_count, block_size,
         page_size, total_page_size, device_type, device_name_len) = values
        device_name = data[8*4:8*4+device_name_len]
        client_addr = 0
        flash_open = 0
        if (len(data) > 8*4+device_name_len):
            client_addr = unpack32L(data[8*4+device_name_len:8*4+device_name_len+4])
            flash_open  = unpack32L(data[9*4+device_name_len:9*4+device_name_len+4])
        print "device name:     %s"%device_name
        print "device maker id: %08X"%device_maker_id
        print "device_id:       %08X"%device_id
        print "block_count:     %08X"%block_count
        print "block_size:      %08X"%block_size
        print "page_size:       %08X"%page_size
        print "total_page_size: %08X"%total_page_size
        print "client_addr:     %08X"%client_addr
        print "flash_open_addr: %08X"%flash_open


        device_str = str(device_type)
        if (device_type in nand_type_string.keys()):
            device_str = nand_type_string[device_type]
        print "device_type:     %s"%device_str
        size = page_size*block_size*block_count
        print "size:            %d MB (%d KB)"%(size/1024/1024, size)


        self.total_page_size = total_page_size
        self.page_size       = page_size
        return values, device_name
    
    def internal_nand_update(self, page_size, total_page_size):
        self.page_size = page_size
        self.total_page_size = total_page_size
            
        self._ProtocolRETeam__send_command(self.Commands.INTERNAL_NAND_UPDATE, pack32L(self.page_size) + pack32L(self.total_page_size))


    def internal_nand_read(self,page, param1 = None, param2 = None):
        out = pack32L(page)        
        if (None != param1):
            out += pack32L(param1)


        if (None != param2):
            out += pack32L(param2)
            
        data = self._ProtocolRETeam__send_command(self.Commands.INTERNAL_NAND_READ, out)
        if ("\xff\xff\xff\xff" == data):
            return self.total_page_size * "\xFF"
        return data                              




    
    def authenticate(self):
        """
        send 32 bit value, get back challange.
        send response, get back some value if it's the correct response
        """
        
        challange = unpack32L(self._ProtocolRETeam__send_command(self.Commands.CHALLENGE_REQ))
        print "Authenticate, Received: %X" % challange
        resp = gen_response(challange)
        return self._ProtocolRETeam__send_command(self.Commands.CHALLENGE_RES, pack32L(resp))
